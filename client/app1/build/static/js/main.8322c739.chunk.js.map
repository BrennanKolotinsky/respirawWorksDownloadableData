{"version":3,"sources":["services/index.js","data-file-table/index.jsx","upload-file/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["url","window","location","host","getFileNames","a","route","axios","method","crossDomain","downloadFile","fileName","data","uploadFile","file","filename","formData","FormData","append","fetch","body","then","res","json","alert","JSON","stringify","DataFileTable","props","useState","loadedFileNames","setLoadedFileNames","files","setFiles","useEffect","fileNames","fetchData","filesTable","map","index","className","onClick","createFile","href","length","createAllFiles","resp","downloadName","split","fileToSave","Blob","type","name","fields","Object","keys","replacer","key","value","csv","row","fieldName","join","unshift","saveAs","forEach","ImportFile","selectedFile","setSelectedFile","selectedFilename","setSelectedFilename","onChange","event","target","accept","console","log","App","style","display","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8322c739.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst url = window.location.host === \"localhost:3000\" ? \"http://localhost:8080\" : \"\";\n\nconst getFileNames = async () => {\n\tconst route = url + \"/get-mongo-data/file-names\";\n\treturn await axios({\n        method: \"GET\", \n        url: route,\n        crossDomain: true,\n    });\n}\n\nconst downloadFile = async (fileName) => {\n    const route = `${url}/get-mongo-data/download-file?fileName=${fileName}`;\n    return await axios({\n        method: \"GET\", \n        url: route,\n        crossDomain: true,\n        data: {\n            fileName,\n        }\n    });\n}\n\nconst uploadFile = async (file, filename) => {\n\n    const route = `${url}/get-mongo-data/upload-file`;\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    const res = await fetch(route, {\n      method: \"POST\",\n      body: formData,\n      crossDomain: true,\n    }).then(res => res.json())\n    alert(JSON.stringify(res))\n}\n\nexport { \n    getFileNames,\n    downloadFile,\n    uploadFile,\n};","import React, { useEffect, useState } from 'react';\nimport { getFileNames, downloadFile } from '../services/index';\nimport './index.css'\nimport { saveAs } from 'file-saver';\n\nimport 'font-awesome/css/font-awesome.min.css';\n\nconst DataFileTable = (props) => {\n\n  const[loadedFileNames, setLoadedFileNames] = useState(false);\n  const[files, setFiles] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const files = await getFileNames();\n      setLoadedFileNames(true);\n      setFiles(files?.data?.fileNames);\n    }\n    fetchData();\n  }, []);\n\n  const filesTable = files.map((file, index) => {\n     return <div className=\"\" key={index}>\n       { index === 0 ?\n         (\n           <div className=\"row border mt-4\">\n             <p className=\"col-2 mt-3\"><strong>Index:</strong></p>\n             <p className=\"col-4 my-auto\"><i className=\"fa fa-file\"></i><strong> Filename:</strong></p>\n             <p className=\"col-4 my-auto\"><i className=\"fa fa-download\"></i><strong> Download:</strong></p>\n             <p className=\"col-2 my-auto\"><i className=\"fa fa-external-link\"></i><strong> URL:</strong></p>\n           </div>\n         )\n         : null \n       }\n\n       <div className=\"row border\" key={index}>\n         <p className=\"col-2 mt-3\">{ index + 1 }</p>\n         <p className=\"col-4 mt-3 text-break\">{ file }</p>\n         <div className=\"col-2 my-auto mx-auto\">\n           <button className=\"btn btn-primary\"\n              onClick={() => createFile(file, true)}>JSON</button>\n         </div>\n\n         <div className=\"col-2 my-auto mx-auto\">\n           <button className=\"btn btn-secondary\"\n            onClick={() => createFile(file, false)}>CSV</button>\n         </div>\n\n          <p className=\"col-2 my-auto\"><a href={`http://ventmon.coslabs.com/breath_plot?raworks=https://respiraworks-download-data.herokuapp.com/get-mongo-data/get-file?fileName=${file}`}>Link</a></p>\n       </div>\n\n       { index + 1 === files.length ?\n         (\n           <div className=\"row border\">\n             <p className=\"col-2 mt-3\">{ index + 2}</p>\n             <p className=\"col-4 my-auto\"><strong>All Files</strong></p>\n             <button className=\"btn btn-success col-4 my-auto download-button mx-auto\"\n               onClick={() => createAllFiles()}>DOWNLOAD ALL (CSV)</button>\n\n             <p className=\"col-2\"></p>\n           </div>\n         )\n         : null \n       }\n     </div>\n  });\n\n  const createFile = async (fileName, json = true) => {\n    const resp = await downloadFile(fileName);\n    const { file } = resp?.data;\n\n    const downloadName = fileName.split('.')[0] + (json ? '.json' : '.csv');\n    let fileToSave = null;\n\n    if (json) {\n\n      // Create a blob of the data\n      fileToSave = new Blob([JSON.stringify(file)], {\n          type: 'application/json',\n          name: downloadName\n      });\n      \n    } else {\n\n      // code taken from: https://stackoverflow.com/questions/8847766/how-to-convert-json-to-csv-format-and-store-in-a-variable\n      const json = file?.data;\n      const fields = Object.keys(json[0]);\n      const replacer = function(key, value) { return value === null ? '' : value } \n      let csv = json.map(function(row) {\n        return fields.map(function(fieldName) {\n          return JSON.stringify(row[fieldName], replacer);\n        }).join(',')\n      })\n      csv.unshift(fields.join(',')); // add header column\n      csv = csv.join('\\r\\n');\n\n      fileToSave = new Blob([csv], {\n          type: 'text/csv',\n          name: downloadName\n      });\n    }\n\n    // Save the file\n    saveAs(fileToSave, downloadName);\n  };\n\n  const createAllFiles = () => {\n    files.forEach((file) => createFile(file, false));\n  };\n  \n  return (\n    <div>\n      <div className=\"container max-width-600 mb-4\">\n        <h2 className=\"mt-4\">Downloadable Test Data:</h2>\n        {loadedFileNames ? filesTable : <center><i className=\"fa fa-spinner fa-spin fa-5x mt-5\"></i></center>}\n      </div>\n    </div>\n  );\n\n}\n\nexport default DataFileTable;","import React, { useEffect, useState } from 'react';\nimport { uploadFile } from '../services/index';\n\nconst ImportFile = (props) => {\n\n\tconst[selectedFile, setSelectedFile] = useState(null);\n\tconst[selectedFilename, setSelectedFilename] = useState(null);\n\n\tconst onFileChange = (event) => {\n\t\tif (event.target.files.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst file = event.target.files[0];\n\t\tsetSelectedFilename(file.name);\n\t\tsetSelectedFile(file);\n\t}\n\n\tconst onFileUpload = () => {\n\t\tif (selectedFile === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log('Uploading!', selectedFile, selectedFilename);\n\t\tuploadFile(selectedFile, selectedFilename);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Upload a file!!</h2>\n\t\t\t\n\t\t\t<div>\n\t\t\t\t{/* Change to application/json */}\n                <input type=\"file\" onChange={onFileChange} accept=\"application/json\" />\n                <button onClick={onFileUpload}>\n                  Upload!\n                </button>\n            </div>\n\t\t</div>\n\t);\n}\n\nexport default ImportFile;","import DataFileTable from './data-file-table';\nimport UploadFile from './upload-file';\nimport './App.scss';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nexport default function App() {\n  return (\n    <div>\n      <h1 style={{ display: \"none\" }}>Brennan Kolotinsky</h1>\n      <BrowserRouter>\n        <Switch>\n          \n          <Route path=\"/upload-file\">\n            <UploadFile />\n          </Route>\n\n          <Route path=\"/\">\n            <DataFileTable />\n          </Route>\n\n        </Switch>\n      </BrowserRouter>\n      \n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}